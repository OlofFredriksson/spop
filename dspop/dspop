#!/usr/bin/env python3

# Copyright (C) 2010, 2011, 2012, 2013 Thomas Jost
#
# This file is part of spop.
#
# spop is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# spop is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# spop. If not, see <http://www.gnu.org/licenses/>.
#
# Additional permission under GNU GPL version 3 section 7
#
# If you modify this Program, or any covered work, by linking or combining it
# with libspotify (or a modified version of that library), containing parts
# covered by the terms of the Libspotify Terms of Use, the licensors of this
# Program grant you additional permission to convey the resulting work.

import json
import socket
import subprocess

# {{{ Parameters
# %n%: number - %A%: artist - %T%: title - %a%: album - %d%: duration - %U%: URI
TRACK_FMT="%n% - %a% - %A% - %T% (%d%)"

DMENU_OPTS=["-i",  "-l", "40"]
# }}}
# {{{ Spop client
class SpopClient:
    def __init__(self, host, port):
        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self._sock.connect((host, port))
        self.greeting = self._sock.recv(1024).decode().strip()

    def _command(self, command, *args):
        esc_args = ['"'+arg.replace('"', '\"')+'"' if type(arg) is str else str(arg) for arg in args]
        esc_args.insert(0, command)
        cmd = " ".join(esc_args) + "\n"
        self._sock.send(cmd.encode())

        buf = b""
        while True:
            tmp = self._sock.recv(128)
            buf += tmp
            if len(tmp) < 128:
                try:
                    obj = json.loads(buf.decode())
                    return obj
                except:
                    pass

    def __getattr__(self, name):
        if name in ("repeat", "shuffle", "qclear", "qls", "ls", "goto", "add", "play"):
            def func(*attrs):
                return self._command(name, *attrs)
            return func
        else:
            raise AttributeError
# }}}
# {{{ Dmenu interaction
def dmenu(items):
    args = ["dmenu"]
    args.extend(DMENU_OPTS)
    p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    for it in items:
        p.stdin.write((it+"\n").encode())

    out, _ = p.communicate()

    if len(out) == 0:
        return None

    out = out[:-1].decode()
    return items.index(out)

def format_track(track):
    s = TRACK_FMT
    s = s.replace("%n%", str(track["index"]))
    s = s.replace("%A%", track["artist"])
    s = s.replace("%T%", track["title"])
    s = s.replace("%a%", track["album"])
    s = s.replace("%d%", "%d:%02d" % divmod(track["duration"]/1000, 60))
    s = s.replace("%U%", track["uri"])

    return s

def format_folder(items, indent=0):
    dst, indices = [], []
    for it in items:
        if it["type"] == "separator":
            dst.append(" "*indent + "-"*40)
            indices.append(None)
        elif it["type"] == "folder":
            dst.append(" "*indent + "+ " + it["name"])
            indices.append(None)
            rdst, rind = format_folder(it["playlists"], indent+2)
            dst.extend(rdst)
            indices.extend(rind)
        elif it["type"] == "playlist":
            dst.append(" "*indent + "%s (%d)" % (it["name"], it["tracks"]))
            indices.append(it["index"])
    return dst, indices
# }}}
# {{{ Menus
def main_menu(sc):
    done = False
    while not done:
        choice = dmenu(["[ Queue ]>", "[ Playlists ]>", "[ Repeat ]", "[ Shuffle ]"])

        if choice is None:
            done = True
        elif choice == 0:
            done = menu_queue(sc)
        elif choice == 1:
            done = menu_playlists(sc)
        elif choice == 2:
            sc.repeat()
        else:
            sc.shuffle()

def menu_queue(sc):
    items = ["[ Clear queue ]"]

    tracks = sc.qls()["tracks"]
    items.extend(map(format_track, tracks))

    choice = dmenu(items)

    if choice is None:
        return False
    elif choice == 0:
        sc.qclear()
        return False
    else:
        sc.goto(choice)
        return True

def menu_playlists(sc):
    pls = sc.ls()["playlists"]
    items, indices = format_folder(pls)

    done = False
    while not done:
        choice = dmenu(items)
        if choice is None:
            return False
        else:
            idx = indices[choice]
            if idx is None:
                continue
            done = menu_playlist(sc, idx)
    return True

def menu_playlist(sc, idx):
    tracks = sc.ls(idx)["tracks"]

    # TODO: handle unavailable tracks
    items = ["[ Set as queue ]", "[ Add to queue ]"]
    items.extend(map(format_track, tracks))

    choice = dmenu(items)
    if choice is None:
        return False
    elif choice == 0:
        sc.play(idx)
        return False
    elif choice == 1:
        sc.add(idx)
        return False
    else:
        sc.play(idx, choice-1)
        return True
# }}}

if __name__ == "__main__":
    sc = SpopClient("localhost", 6602)
    main_menu(sc)
